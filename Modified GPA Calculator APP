import tkinter as tk
from tkinter import messagebox, filedialog
import pandas as pd

class GPAApp:
    def __init__(self, root):
        self.root = root
        self.root.title("üéì GPA Calculator Software")
        self.root.geometry("600x500")
        self.root.configure(bg="#f0f8ff")

        self.all_data = []
        self.reset_main_input()

    def reset_main_input(self):
        self.clear_window()
        self.subject_entries = []
        self.mark_entries = []

        tk.Label(self.root, text="Enter Student Name:", fg="#333", bg="#f0f8ff", font=('Arial', 12, 'bold')).pack(pady=(15, 5))
        self.name_entry = tk.Entry(self.root, width=40, font=('Arial', 11))
        self.name_entry.pack()
        self.name_entry.bind('<Return>', lambda event: self.num_entry.focus_set())

        tk.Label(self.root, text="Enter Number of Subjects:", fg="#333", bg="#f0f8ff", font=('Arial', 12, 'bold')).pack(pady=(15, 5))
        self.num_entry = tk.Entry(self.root, width=40, font=('Arial', 11))
        self.num_entry.pack()
        self.num_entry.bind('<Return>', lambda event: self.generate_student_inputs())

        tk.Button(self.root, text='Next ‚û°', fg='white', bg='#007acc', font=('Arial', 11, 'bold'), command=self.generate_student_inputs).pack(pady=20)

        self.output_label = tk.Label(self.root, text='', fg='red', bg="#f0f8ff", font=('Arial', 10, 'italic'))
        self.output_label.pack()
        self.name_entry.focus_set()

    def generate_student_inputs(self):
        name = self.name_entry.get().strip()
        try:
            num_subjects = int(self.num_entry.get().strip())
            if not name or num_subjects <= 0:
                raise ValueError
        except ValueError:
            self.output_label.config(text="‚ùå Invalid name or number of subjects.")
            return

        self.student_name = name
        self.num_subjects = num_subjects
        self.clear_window()

        tk.Label(self.root, text=f"Student: {self.student_name}", fg="#007acc", bg="#f0f8ff", font=('Arial', 13, 'bold')).pack(pady=5)

        self.subject_frame = tk.Frame(self.root, bg="#f0f8ff")
        self.subject_frame.pack()

        for i in range(num_subjects):
            tk.Label(self.subject_frame, text=f"Subject {i+1} Name", fg='black', bg="#f0f8ff", font=('Arial', 10)).grid(row=i, column=0, padx=5, pady=2)
            sub_entry = tk.Entry(self.subject_frame, font=('Arial', 10))
            sub_entry.grid(row=i, column=1, padx=5, pady=2)

            tk.Label(self.subject_frame, text="Mark", fg='black', bg="#f0f8ff", font=('Arial', 10)).grid(row=i, column=2, padx=5, pady=2)
            mark_entry = tk.Entry(self.subject_frame, font=('Arial', 10))
            mark_entry.grid(row=i, column=3, padx=5, pady=2)

            if i == 0:
                sub_entry.focus_set()

            self.subject_entries.append(sub_entry)
            self.mark_entries.append(mark_entry)

            sub_entry.bind('<Return>', lambda event, m=mark_entry: m.focus_set())
            if i < num_subjects - 1:
                def focus_next(i=i):
                    return lambda event: self.subject_entries[i+1].focus_set()
                mark_entry.bind('<Return>', focus_next())
            else:
                mark_entry.bind('<Return>', lambda event: self.store_student_data())

        tk.Button(self.root, text='Submit ‚úÖ', fg='white', bg='#28a745', font=('Arial', 11, 'bold'), command=self.store_student_data).pack(pady=10)

    def store_student_data(self):
        subjects = []
        marks = []
        for i in range(self.num_subjects):
            sub = self.subject_entries[i].get().strip()
            mark = self.mark_entries[i].get().strip()
            if sub == '' or mark == '':
                self.output_label.config(text="‚ùå All fields must be filled.")
                return
            try:
                mark = float(mark)
                if not (0 <= mark <= 100):
                    raise ValueError
            except ValueError:
                self.output_label.config(text=f'‚ùå Invalid mark for Subject {i+1}')
                return
            subjects.append(sub)
            marks.append(mark)

        gpa = self.calculate_gpa(marks)
        student_data = {"Student name": self.student_name}
        for idx, (sub, m) in enumerate(zip(subjects, marks), 1):
            student_data[f"Subject {idx}"] = sub
            student_data[f"Mark {idx}"] = m
        student_data['GPA'] = gpa
        self.all_data.append(student_data)
        messagebox.showinfo("üéì GPA Result", f"{self.student_name}'s GPA: {gpa}")
        self.ask_continue_or_quit()

    def calculate_gpa(self,marks):
        points=[]
        for mark in marks:
            if mark>=80:
                points.append(5.00)
            elif mark>=70:
                points.append(4.00)
            elif mark>=60:
                points.append(3.50)
            elif mark>=50:
                points.append(3.00)
            elif mark>=40:
                points.append(2.00)
            else:
                x=0.00
                return f"{x} (Failed)"
        gpa=round((sum(points)/len(points)),2)
        if gpa==5.00:
            return '5.00 (A+)'
        elif gpa>=4.00:
            return f"{gpa} (A)"
        elif gpa>=3.50:
            return f"{gpa} (A-)"
        elif gpa>=3.00:
            return f"{gpa} (B)"
        elif gpa>=2.00:
            return f"{gpa} (C)"
        else:
            return f"{gpa} D"
    def ask_continue_or_quit(self):
        response = messagebox.askquestion("Next Step", "Do you want to enter another student?")
        if response == 'yes':
            self.reset_main_input()
        else:
            self.show_final_dataframe()

    def show_final_dataframe(self):
        self.clear_window()
        df = pd.DataFrame(self.all_data)
        if df.empty:
            tk.Label(self.root, text='‚ùå No Data to Display', fg='red', bg="#f0f8ff").pack(pady=5)
            return
        text_widget = tk.Text(self.root, font=('Courier', 10), wrap='none', height=15)
        text_widget.insert('end', df.to_string(index=False))
        text_widget.pack(expand=True, fill='both')

        scrollbar = tk.Scrollbar(self.root, command=text_widget.yview)
        text_widget.config(yscrollcommand=scrollbar.set)
        scrollbar.pack(side='right', fill='y')

        tk.Button(self.root, text="üì• Download CSV", fg='white', bg='#17a2b8', font=('Arial', 11), command=lambda: self.save_csv(df)).pack(pady=10)

    def save_csv(self, df):
        file_path = filedialog.asksaveasfilename(defaultextension='.csv', filetypes=[('CSV files', '*.csv')])
        if file_path:
            df.to_csv(file_path, index=False)
            messagebox.showinfo("‚úÖ Success", "CSV file saved successfully!")

    def clear_window(self):
        for widget in self.root.winfo_children():
            widget.destroy()

# Run the app
if __name__ == "__main__":
    root = tk.Tk()
    app = GPAApp(root)
    root.mainloop()
